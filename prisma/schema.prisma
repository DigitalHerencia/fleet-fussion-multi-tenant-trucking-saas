generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                     String                   @id @default(uuid())
  clerkId                String                   @unique
  name                   String
  slug                   String                   @unique
  mcNumber               String?                  @map("mc_number")
  address                String?
  city                   String?
  state                  String?
  zip                    String?
  phone                  String?
  email                  String?
  logoUrl                String?                  @map("logo_url")
  subscriptionTier       SubscriptionTier         @default(free) @map("subscription_tier")
  subscriptionStatus     SubscriptionStatus       @default(trial) @map("subscription_status")
  maxUsers               Int                      @default(5) @map("max_users")
  maxVehicles            Int                      @default(10) @map("max_vehicles")
  billingEmail           String?                  @map("billing_email")
  settings               Json?                    @default("{\"fuelUnit\": \"gallons\", \"timezone\": \"America/Denver\", \"dateFormat\": \"MM/dd/yyyy\", \"distanceUnit\": \"miles\"}")
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  dotNumber              String?
  auditLogs              AuditLog[]
  complianceDocuments    ComplianceDocument[]
  drivers                Driver[]
  IftaFuelPurchase       IftaFuelPurchase[]
  iftaReports            IftaReport[]
  IftaTrip               IftaTrip[]
  loads                  Load[]
  users                  User[]
  vehicles               Vehicle[]
  memberships            OrganizationMembership[]
  complianceAlerts       ComplianceAlert[]
  analyticsFilterPresets AnalyticsFilterPreset[]
  notifications          Notification[]
  // Enhanced IFTA relations
  jurisdictionTaxRates   JurisdictionTaxRate[]
  iftaReportPDFs         IftaReportPDF[]
  iftaTaxCalculations    IftaTaxCalculation[]
  iftaAuditLogs          IftaAuditLog[]
  iftaPDFGenerationLogs  IftaPDFGenerationLog[]
  regulatoryAudits       RegulatoryAudit[]

  @@index([slug])
  @@map("organizations")
}

model User {
  id                     String                   @id @default(uuid())
  clerkId                String                   @unique @map("clerk_id")
  organizationId         String?                  @map("organization_id") // <-- Now nullable
  email                  String? // <-- Now nullable
  firstName              String?                  @map("first_name")
  lastName               String?                  @map("last_name")
  profileImage           String?                  @map("profile_image")
  role                   UserRole                 @default(member)
  permissions            Json?                    @default("[]")
  isActive               Boolean                  @default(true) @map("is_active")
  lastLogin              DateTime?                @map("last_login")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  onboardingSteps        Json?                    @default("{}") @map("onboarding_steps")
  onboardingComplete     Boolean                  @default(false) @map("onboarding_complete")
  auditLogs              AuditLog[]
  ComplianceDocument     ComplianceDocument[]     @relation("VerifiedByUser")
  driver                 Driver?
  IftaReport             IftaReport[]             @relation("SubmittedByUser")
  organization           Organization?            @relation(fields: [organizationId], references: [id], onDelete: Cascade) // <-- Make relation optional
  memberships            OrganizationMembership[]
  complianceAlerts       ComplianceAlert[]
  analyticsFilterPresets AnalyticsFilterPreset[]
  notifications          Notification[]
  // Enhanced IFTA relations
  taxRatesCreated        JurisdictionTaxRate[]    @relation("TaxRateCreatedBy")
  pdfsGenerated          IftaReportPDF[]          @relation("PDFGeneratedBy")
  taxCalculations        IftaTaxCalculation[]     @relation("TaxCalculatedBy")
  taxValidations         IftaTaxCalculation[]     @relation("TaxValidatedBy")
  iftaAuditLogs          IftaAuditLog[]           @relation("IftaAuditUser")
  iftaPDFGenerationLogs  IftaPDFGenerationLog[]
  preferences             UserPreferences?

  @@index([clerkId])
  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@map("users")
}

model Vehicle {
  id                     String               @id @default(uuid())
  organizationId         String               @map("organization_id")
  type                   String
  status                 VehicleStatus        @default(active)
  make                   String?
  model                  String?
  year                   Int?
  vin                    String?
  licensePlate           String?              @map("license_plate")
  licensePlateState      String?              @map("license_plate_state")
  unitNumber             String               @map("unit_number")
  currentOdometer        Int?                 @map("current_odometer")
  lastOdometerUpdate     DateTime?            @map("last_odometer_update")
  fuelType               String?              @map("fuel_type")
  maxWeight              Int?                 @map("max_weight")
  maxLength              Decimal?             @map("max_length") @db.Decimal(8, 2)
  lastInspectionDate     DateTime?            @map("last_inspection_date") @db.Date
  insuranceExpiration    DateTime?            @map("insurance_expiration") @db.Date
  notes                  String?
  customFields           Json?                @default("{}") @map("custom_fields")
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  nextInspectionDue      DateTime?            @map("next_inspection_date") @db.Date
  registrationExpiration DateTime?            @map("registration_expiry") @db.Date
  complianceDocuments    ComplianceDocument[]
  iftaFuelPurchases      IftaFuelPurchase[]   @relation("VehicleIftaFuelPurchases")
  iftaTrips              IftaTrip[]           @relation("VehicleIftaTrips")
  trailerLoads           Load[]               @relation("TrailerLoads")
  loads                  Load[]               @relation("VehicleLoads")
  organization           Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  complianceAlerts       ComplianceAlert[]

  @@unique([organizationId, unitNumber], name: "vehicles_org_unit_unique")
  @@index([organizationId])
  @@index([unitNumber])
  @@index([status])
  @@index([type])
  @@map("vehicles")
}

model Driver {
  id                    String               @id @default(uuid())
  organizationId        String               @map("organization_id")
  userId                String?              @unique @map("user_id")
  employeeId            String?              @map("employee_id")
  firstName             String               @map("first_name")
  lastName              String               @map("last_name")
  email                 String?
  phone                 String?
  address               String?
  city                  String?
  state                 String?
  zip                   String?
  licenseNumber         String?              @map("license_number")
  licenseState          String?              @map("license_state")
  licenseClass          String?              @map("license_class")
  licenseExpiration     DateTime?            @map("license_expiration") @db.Date
  drugTestDate          DateTime?            @map("drug_test_date") @db.Date
  hireDate              DateTime?            @map("hire_date") @db.Date
  terminationDate       DateTime?            @map("termination_date") @db.Date
  status                DriverStatus         @default(active)
  notes                 String?
  customFields          Json?                @default("{}") @map("custom_fields")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  backgroundCheckDate   DateTime?            @map("background_check") @db.Date
  emergencyContact1     String?              @map("emergency_contact_1")
  emergencyContact2     String?              @map("emergency_contact_2")
  emergencyContact3     String?              @map("emergency_contact_3")
  medicalCardExpiration DateTime?            @map("medical_card_exp") @db.Date
  complianceDocuments   ComplianceDocument[]
  organization          Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User?                @relation(fields: [userId], references: [id])
  loads                 Load[]
  complianceAlerts      ComplianceAlert[]

  @@unique([organizationId, employeeId], name: "drivers_org_employee_unique")
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([licenseNumber])
  @@map("drivers")
}

model Load {
  id                    String            @id @default(uuid())
  organizationId        String            @map("organization_id")
  driverId              String?           @map("driver_id")
  vehicleId             String?           @map("vehicle_id")
  trailerId             String?           @map("trailer_id")
  loadNumber            String            @map("load_number")
  referenceNumber       String?           @map("reference_number")
  status                LoadStatus        @default(pending)
  customerName          String?           @map("customer_name")
  customerContact       String?           @map("customer_contact")
  customerPhone         String?           @map("customer_phone")
  customerEmail         String?           @map("customer_email")
  originAddress         String            @map("origin_address")
  originCity            String            @map("origin_city")
  originState           String            @map("origin_state")
  originZip             String            @map("origin_zip")
  originLat             Decimal?          @map("origin_lat") @db.Decimal(10, 6)
  originLng             Decimal?          @map("origin_lng") @db.Decimal(10, 6)
  destinationAddress    String            @map("destination_address")
  destinationCity       String            @map("destination_city")
  destinationState      String            @map("destination_state")
  destinationZip        String            @map("destination_zip")
  destinationLat        Decimal?          @map("destination_lat") @db.Decimal(10, 6)
  destinationLng        Decimal?          @map("destination_lng") @db.Decimal(10, 6)
  rate                  Decimal?          @db.Decimal(10, 2)
  currency              String?           @default("USD")
  scheduledPickupDate   DateTime?         @map("scheduled_pickup_date")
  actualPickupDate      DateTime?         @map("actual_pickup_date")
  scheduledDeliveryDate DateTime?         @map("scheduled_delivery_date")
  actualDeliveryDate    DateTime?         @map("actual_delivery_date")
  // Alias fields for code compatibility
  pickupDate            DateTime?         @map("pickup_date")
  deliveryDate          DateTime?         @map("delivery_date")
  origin                Json?             @map("origin_json")
  destination           Json?             @map("destination_json")
  cargo                 Json?             @map("cargo_json")
  equipment             Json?             @map("equipment_json")
  weight                Int?
  pieces                Int?
  commodity             String?
  hazmat                Boolean?          @default(false)
  estimatedMiles        Int?              @map("estimated_miles")
  actualMiles           Int?              @map("actual_miles")
  notes                 String?
  instructions          String?
  customFields          Json?             @default("{}") @map("custom_fields")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  priority              LoadPriority      @default(medium)
  tags                  String[]          @default([])
  createdBy             String?           @map("created_by")
  lastModifiedBy        String?           @map("last_modified_by")
  statusEvents          LoadStatusEvent[]
  documents             LoadDocument[]
  driver                Driver?           @relation(fields: [driverId], references: [id])
  organization          Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  trailer               Vehicle?          @relation("TrailerLoads", fields: [trailerId], references: [id])
  vehicle               Vehicle?          @relation("VehicleLoads", fields: [vehicleId], references: [id])

  @@unique([organizationId, loadNumber], name: "loads_org_load_unique")
  @@index([organizationId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([trailerId])
  @@index([status])
  @@index([loadNumber])
  @@index([scheduledPickupDate], map: "loads_scheduled_pickup_idx")
  @@map("loads")
}

model LoadStatusEvent {
  id              String     @id @default(uuid())
  loadId          String     @map("load_id")
  status          LoadStatus
  timestamp       DateTime   @default(now())
  location        Json?
  notes           String?
  automaticUpdate Boolean    @default(false) @map("automatic_update")
  source          String     @default("dispatcher")
  createdBy       String?
  load            Load       @relation(fields: [loadId], references: [id], onDelete: Cascade)

  @@index([loadId])
  @@map("load_status_events")
}

model LoadDocument {
  id           String   @id @default(uuid())
  loadId       String   @map("load_id")
  name         String
  type         String
  category     String?
  description  String?
  isRequired   Boolean  @default(false) @map("is_required")
  url          String?
  fileSize     Int?     @map("file_size")
  mimeType     String?  @map("mime_type")
  isReceived   Boolean  @default(false) @map("is_received")
  receivedAt   DateTime? @map("received_at")
  uploadedAt   DateTime? @map("uploaded_at")
  uploadedBy   String?  @map("uploaded_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  load         Load     @relation(fields: [loadId], references: [id], onDelete: Cascade)

  @@index([loadId])
  @@map("load_documents")
}

model ComplianceDocument {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  driverId         String?      @map("driver_id")
  vehicleId        String?      @map("vehicle_id")
  type             String
  title            String
  documentNumber   String?      @map("document_number")
  issuingAuthority String?      @map("issuing_authority")
  fileUrl          String?      @map("file_url")
  fileName         String?      @map("file_name")
  fileSize         Int?         @map("file_size")
  mimeType         String?      @map("mime_type")
  issueDate        DateTime?    @map("issue_date") @db.Date
  expirationDate   DateTime?    @map("expiration_date") @db.Date
  status           String       @default("active")
  isVerified       Boolean?     @default(false) @map("is_verified")
  verifiedBy       String?      @map("verified_by")
  verifiedAt       DateTime?    @map("verified_at")
  notes            String?
  tags             Json?        @default("[]")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  metadata         Json?        @default("{}")
  driver           Driver?      @relation(fields: [driverId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle          Vehicle?     @relation(fields: [vehicleId], references: [id])
  verifiedByUser   User?        @relation("VerifiedByUser", fields: [verifiedBy], references: [id])

  @@index([organizationId])
  @@index([driverId])
  @@index([vehicleId])
  @@index([verifiedBy])
  @@index([type])
  @@index([status])
  @@index([expirationDate], map: "compliance_documents_expiration_idx")
  @@map("compliance_documents")
}

model IftaReport {
  id              String       @id @default(uuid())
  organizationId  String       @map("organization_id")
  quarter         Int
  year            Int
  status          String       @default("draft")
  totalMiles      Int?         @map("total_miles")
  totalGallons    Decimal?     @map("total_gallons") @db.Decimal(10, 3)
  totalTaxOwed    Decimal?     @map("total_tax_owed") @db.Decimal(10, 2)
  totalTaxPaid    Decimal?     @map("total_tax_paid") @db.Decimal(10, 2)
  submittedAt     DateTime?    @map("submitted_at")
  submittedBy     String?      @map("submitted_by")
  dueDate         DateTime?    @map("due_date") @db.Date
  filedDate       DateTime?    @map("filed_date") @db.Date
  reportFileUrl   String?      @map("report_file_url")
  notes           String?
  calculationData Json?        @default("{}") @map("calculation_data")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  supportingDocs  String?      @map("supporting_docs")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  submittedByUser User?        @relation("SubmittedByUser", fields: [submittedBy], references: [id])
  // Enhanced IFTA relations
  reportPDFs      IftaReportPDF[]
  taxCalculations IftaTaxCalculation[]

  @@index([organizationId])
  @@index([submittedBy])
  @@index([quarter, year])
  @@index([status])
  @@index([dueDate])
  @@map("ifta_reports")
}

model AuditLog {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String?      @map("user_id")
  entityType     String       @map("entity_type")
  entityId       String       @map("entity_id")
  action         String
  changes        Json?
  metadata       Json?
  timestamp      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([entityType])
  @@index([entityId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model WebhookEvent {
  id              String    @id @default(uuid())
  eventType       String    @map("event_type")
  eventId         String    @unique(map: "webhook_events_event_id_unique") @map("event_id")
  organizationId  String?   @map("organization_id")
  userId          String?   @map("user_id")
  payload         Json
  status          String    @default("pending")
  processingError String?   @map("processing_error")
  processedAt     DateTime? @map("processed_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  retryCount      Int       @default(0) @map("retry_count")

  @@index([eventType])
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("webhook_events")
}

model IftaTrip {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  vehicleId      String       @map("vehicle_id")
  date           DateTime     @map("date")
  distance       Int          @map("distance")
  jurisdiction   String       @map("jurisdiction")
  fuelUsed       Decimal?     @map("fuel_used") @db.Decimal(10, 3)
  notes          String?      @map("notes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle        Vehicle      @relation("VehicleIftaTrips", fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([vehicleId])
  @@index([date])
  @@map("ifta_trips")
}

model IftaFuelPurchase {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  vehicleId      String       @map("vehicle_id")
  date           DateTime     @map("date")
  jurisdiction   String       @map("jurisdiction")
  gallons        Decimal      @map("gallons") @db.Decimal(10, 3)
  amount         Decimal      @map("amount") @db.Decimal(10, 2)
  vendor         String?      @map("vendor")
  receiptNumber  String?      @map("receipt_number")
  notes          String?      @map("notes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vehicle        Vehicle      @relation("VehicleIftaFuelPurchases", fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([vehicleId])
  @@index([date])
  @@map("ifta_fuel_purchases")
}

// Enhanced IFTA Domain Models for Comprehensive Tax Management

model JurisdictionTaxRate {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  jurisdiction   String       @map("jurisdiction") // State/Province code (e.g., 'CA', 'NY', 'TX')
  taxRate        Decimal      @map("tax_rate") @db.Decimal(8, 6) // Tax rate per gallon
  effectiveDate  DateTime     @map("effective_date") @db.Date
  endDate        DateTime?    @map("end_date") @db.Date
  source         String       @default("MANUAL") @map("source") // 'GOVERNMENT' | 'MANUAL'
  verifiedDate   DateTime     @map("verified_date") @db.Date
  isActive       Boolean      @default(true) @map("is_active")
  notes          String?      @map("notes")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  createdBy      String?      @map("created_by")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdByUser  User?        @relation("TaxRateCreatedBy", fields: [createdBy], references: [id])

  @@unique([organizationId, jurisdiction, effectiveDate], name: "jurisdiction_rate_unique")
  @@index([organizationId])
  @@index([jurisdiction])
  @@index([effectiveDate])
  @@index([isActive])
  @@map("jurisdiction_tax_rates")
}

model IftaReportPDF {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  reportId       String       @map("report_id")
  reportType     String       @map("report_type") // 'QUARTERLY' | 'TRIP_LOG' | 'FUEL_SUMMARY' | 'CUSTOM'
  quarter        String?      @map("quarter") // e.g., 'Q1', 'Q2', etc.
  year           Int?         @map("year")
  fileName       String       @map("file_name")
  filePath       String       @map("file_path")
  fileSize       Int          @map("file_size")
  mimeType       String       @default("application/pdf") @map("mime_type")
  generatedAt    DateTime     @default(now()) @map("generated_at")
  generatedBy    String       @map("generated_by")
  isOfficial     Boolean      @default(false) @map("is_official") // Digital signature applied
  watermark      String?      @map("watermark")
  downloadCount  Int          @default(0) @map("download_count")
  lastDownload   DateTime?    @map("last_download")
  metadata       Json?        @default("{}") @map("metadata")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  generatedByUser User        @relation("PDFGeneratedBy", fields: [generatedBy], references: [id])
  iftaReport     IftaReport?  @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([reportId])
  @@index([reportType])
  @@index([generatedAt])
  @@map("ifta_report_pdfs")
}

model IftaTaxCalculation {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  reportId         String       @map("report_id")
  jurisdiction     String       @map("jurisdiction")
  totalMiles       Int          @map("total_miles")
  taxableMiles     Int          @map("taxable_miles")
  fuelPurchased    Decimal      @map("fuel_purchased") @db.Decimal(10, 3)
  fuelConsumed     Decimal      @map("fuel_consumed") @db.Decimal(10, 3)
  taxRate          Decimal      @map("tax_rate") @db.Decimal(8, 6)
  taxDue           Decimal      @map("tax_due") @db.Decimal(10, 2)
  taxPaid          Decimal      @default(0) @map("tax_paid") @db.Decimal(10, 2)
  taxCredits       Decimal      @default(0) @map("tax_credits") @db.Decimal(10, 2)
  adjustments      Decimal      @default(0) @map("adjustments") @db.Decimal(10, 2)
  netTaxDue        Decimal      @map("net_tax_due") @db.Decimal(10, 2)
  calculatedAt     DateTime     @default(now()) @map("calculated_at")
  calculatedBy     String       @map("calculated_by")
  isValidated      Boolean      @default(false) @map("is_validated")
  validatedAt      DateTime?    @map("validated_at")
  validatedBy      String?      @map("validated_by")
  
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  iftaReport       IftaReport   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  calculatedByUser User         @relation("TaxCalculatedBy", fields: [calculatedBy], references: [id])
  validatedByUser  User?        @relation("TaxValidatedBy", fields: [validatedBy], references: [id])

  @@unique([reportId, jurisdiction], name: "report_jurisdiction_unique")
  @@index([organizationId])
  @@index([reportId])
  @@index([jurisdiction])
  @@index([calculatedAt])
  @@map("ifta_tax_calculations")
}

model IftaAuditLog {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  entityType       String       @map("entity_type") // 'TRIP' | 'FUEL_PURCHASE' | 'REPORT' | 'TAX_CALCULATION'
  entityId         String       @map("entity_id")
  action           String       @map("action") // 'CREATE' | 'UPDATE' | 'DELETE' | 'SUBMIT' | 'APPROVE'
  oldValues        Json?        @map("old_values")
  newValues        Json?        @map("new_values")
  userId           String       @map("user_id")
  timestamp        DateTime     @default(now()) @map("timestamp")
  ipAddress        String?      @map("ip_address")
  userAgent        String?      @map("user_agent")
  notes            String?      @map("notes")
  
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user             User         @relation("IftaAuditUser", fields: [userId], references: [id])

  @@index([organizationId])
  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([timestamp])
  @@map("ifta_audit_logs")
}

enum UserRole {
  admin
  dispatcher
  driver
  compliance
  member
}

enum SubscriptionTier {
  free
  pro
  enterprise
}

enum SubscriptionStatus {
  active
  inactive
  trial
  cancelled
}

enum VehicleStatus {
  active
  inactive
  maintenance
  decommissioned
}

enum DriverStatus {
  active
  inactive
  suspended
  terminated
}

enum LoadStatus {
  draft
  pending
  posted
  booked
  confirmed
  assigned
  dispatched
  in_transit
  at_pickup
  picked_up
  en_route
  at_delivery
  delivered
  pod_required
  completed
  invoiced
  paid
  cancelled
  problem
}

enum LoadPriority {
  low
  medium
  high
  urgent
}

model AnalyticsFilterPreset {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  name           String
  description    String?
  filters        Json // Store AnalyticsFilters as JSON
  isDefault      Boolean      @default(false) @map("is_default")
  isShared       Boolean      @default(false) @map("is_shared")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId, name], name: "analytics_filter_preset_unique")
  @@index([organizationId])
  @@index([userId])
  @@index([isDefault])
  @@index([isShared])
  @@map("analytics_filter_presets")
}

model ComplianceAlert {
  id                     String                   @id @default(uuid())
  organizationId         String                   @map("organization_id")
  userId                 String                   @map("user_id")
  vehicleId              String?                  @map("vehicle_id")
  driverId               String?                  @map("driver_id")
  type                   String
  status                 String                   @default("active")
  severity                String                   @default("low")
  message                String
  isAcknowledged         Boolean                  @default(false) @map("is_acknowledged")
  acknowledgedAt         DateTime?                @map("acknowledged_at")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  notes                  String?
  customFields           Json?                    @default("{}") @map("custom_fields")
  
  organization           Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle                Vehicle?                 @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  driver                 Driver?                  @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([vehicleId])
  @@index([driverId])
  @@index([status])
  @@map("compliance_alerts")
}

model OrganizationMembership {
  id                     String                   @id @default(uuid())
  organizationId         String                   @map("organization_id")
  userId                 String                   @map("user_id")
  role                   String                   @default("member")
  status                 String                   @default("active")
  joinedAt              DateTime                 @default(now()) @map("joined_at")
  leftAt                 DateTime?                @map("left_at")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")

  organization           Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId], name: "organizationId_userId")
  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@map("organization_memberships")
}

model Notification {
  id             String       @id @default(cuid())
  userId         String?      @map("user_id")
  organizationId String       @map("organization_id")
  type           String
  message        String
  status         String       @default("unread")
  readAt         DateTime?    @map("read_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  user         User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@map("notifications")
}

model IftaPDFGenerationLog {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  reportType     String       @map("report_type") // 'QUARTERLY' | 'TRIP_LOG' | 'FUEL_SUMMARY' | 'CUSTOM'
  parameters     Json         @map("parameters") // PDFOptions & filters used
  status         String       @map("status") // 'PENDING' | 'GENERATING' | 'COMPLETED' | 'FAILED'
  filePath       String?      @map("file_path")
  fileName       String?      @map("file_name")
  fileSize       Int?         @map("file_size")
  errorMessage   String?      @map("error_message")
  startedAt      DateTime     @default(now()) @map("started_at")
  completedAt    DateTime?    @map("completed_at")
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([status])
  @@index([startedAt])
  @@map("ifta_pdf_generation_logs")
}

model UserPreferences {
  id                  String    @id @default(cuid())
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dashboardPreferences Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userId])
}

model RegulatoryAudit {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  quarter        String
  year           Int
  summary        Json
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([quarter, year])
  @@map("regulatory_audits")
}
